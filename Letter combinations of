class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        digit_to_char = {
            "2": "abc", "3": "def", "4": "ghi", "5": "jkl",
            "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"
        }

        # Return empty list if input is empty
        if not digits:
            return []

        # Helper function for backtracking
        def backtrack(index, current_combination):
            if index == len(digits):
                # A complete combination is formed
                combinations.append("".join(current_combination))
                return
            
            # Get the letters corresponding to the current digit
            letters = digit_to_char[digits[index]]
            for letter in letters:
                # Add the letter and move to the next digit
                current_combination.append(letter)
                backtrack(index + 1, current_combination)
                # Remove the letter (backtrack)
                current_combination.pop()

        combinations = []
        backtrack(0, [])
        return combinations
