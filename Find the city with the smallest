class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        inf = float('inf')
        dist = [[inf] * n for _ in range(n)]
        
        # Distance from a city to itself is 0
        for i in range(n):
            dist[i][i] = 0
        
        # Step 2: Set the direct distances from the edges
        for from_i, to_i, weight in edges:
            dist[from_i][to_i] = weight
            dist[to_i][from_i] = weight
        
        # Step 3: Floyd-Warshall algorithm to compute shortest paths
        for k in range(n):
            for i in range(n):
                for j in range(n):
                    if dist[i][j] > dist[i][k] + dist[k][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
        
        # Step 4: Count reachable cities for each city
        min_reachable = inf
        city_with_min_reachable = -1
        
        for i in range(n):
            reachable_count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold)
            
            # We want the city with the smallest reachable count, if tie, pick the city with the largest index
            if reachable_count <= min_reachable:
                min_reachable = reachable_count
                city_with_min_reachable = i
        
        return city_with_min_reachable
