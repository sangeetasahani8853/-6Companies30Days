class Solution:
    def matrixChainOrder(self, arr):
        # code here
        n = len(arr)
        dp = [[0] * n for _ in range(n)]
        bracket = [[-1] * n for _ in range(n)]
        
        # Fill dp table
        for length in range(2, n):  # length of the chain
            for i in range(1, n - length + 1):
                j = i + length - 1
                dp[i][j] = float('inf')
                for k in range(i, j):
                    cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j]
                    if cost < dp[i][j]:
                        dp[i][j] = cost
                        bracket[i][j] = k
        
        # Helper function to construct the order
        def construct_order(i, j):
            if i == j:
                return chr(ord('A') + i - 1)
            k = bracket[i][j]
            left = construct_order(i, k)
            right = construct_order(k + 1, j)
            return f"({left}{right})"
        
        # Start the construction from the first matrix to the last
        result = construct_order(1, n - 1)
        return result
