class Solution:
    def maxSubarrayLength(self, nums: List[int], k: int) -> int:
        left = 0
        max_len = 0
        freq = defaultdict(int)  # Frequency map to track the count of elements in the window
        
        # Expand the window by moving the right pointer
        for right in range(len(nums)):
            freq[nums[right]] += 1
            
            # Shrink the window from the left if any element's frequency exceeds k
            while freq[nums[right]] > k:
                freq[nums[left]] -= 1
                left += 1
            
            # Calculate the length of the current valid window
            max_len = max(max_len, right - left + 1)
        
        return max_len
