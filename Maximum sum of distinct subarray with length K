class Solution:
    def maximumSubarraySum(self, nums: List[int], k: int) -> int:
        n = len(nums)
        if k > n:
            return 0
        
        max_sum = 0
        current_sum = 0
        window_start = 0
        unique_elements = set()
        
        for window_end in range(n):
            # Add the new element to the window
            current_sum += nums[window_end]
            
            # Check for duplicates and maintain distinct elements
            while nums[window_end] in unique_elements:
                unique_elements.remove(nums[window_start])
                current_sum -= nums[window_start]
                window_start += 1
            
            # Add the new number to the set of unique elements
            unique_elements.add(nums[window_end])
            
            # Check if the window size is exactly k
            if window_end - window_start + 1 == k:
                # Update max_sum if all elements are distinct
                max_sum = max(max_sum, current_sum)
                # Slide the window
                unique_elements.remove(nums[window_start])
                current_sum -= nums[window_start]
                window_start += 1
        
        return max_sum
        
