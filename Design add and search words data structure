class WordDictionary:
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.is_end = False


    def __init__(self):
        self.root = self.TrieNode()
        

    def addWord(self, word: str) -> None:
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = self.TrieNode()
            node = node.children[char]
        node.is_end = True
        

    def search(self, word: str) -> bool:
        def dfs(node, word, index):
            if index == len(word):
                return node.is_end
            char = word[index]
            if char == '.':
                for child in node.children.values():
                    if dfs(child, word, index + 1):
                        return True
                return False
            elif char in node.children:
                return dfs(node.children[char], word, index + 1)
            return False

        return dfs(self.root, word, 0)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
